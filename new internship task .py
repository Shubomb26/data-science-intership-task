#!/usr/bin/env python
# coding: utf-8

# In[1]:


#pip install newspaper3k


# In[ ]:


#Importing Required Modules


# In[2]:


from newspaper import Article
import nltk
import numpy as np
import pandas as pd
import os


# In[ ]:


#Reading and storing the given xlsx in pandas DataFrame


# In[3]:


links = pd.read_csv('C:\\Users\\singh\\OneDrive\\Desktop\\ml_dataset\\input.csv')
links = pd.DataFrame(links)
webiste_links = links['URL']
print(webiste_links[0:10])


# In[4]:


links


# In[ ]:


#Importing nltk word_tokenize function 


# In[5]:


from nltk.tokenize import word_tokenize
nltk.download('punkt')
from nltk.tokenize import sent_tokenize


# In[ ]:


#loading the contents in a list for Processing parallely counting the number of sentences


# In[6]:


contents = []
sentences_count = []

for i in range(len(webiste_links)):
    href = webiste_links[i]
    nltk.download('punkt', quiet=True)
    article = Article(href)
    article.download()
    article.parse()
    article.nlp()
    title = str(article.title)
    text = str(article.text)
    text_data = title +"\n"+ text
    t_d = text_data
    text_data = word_tokenize(text_data)
    text_data_sentence_count = sent_tokenize(t_d)
    sentences_count.append(len(text_data_sentence_count))
    contents.append(list(text_data))
    
'''with open("link_"+str(i)+"_text.txt",'w+') as f:
        f.write(text_data)
        f.close()'''


# In[7]:


contents[0]


# In[8]:


sentences_count[0:10]


# In[ ]:


#Reading Negative words given in drive folder 


# In[9]:


negative = pd.read_csv("C:\\Users\\singh\\OneDrive\\Desktop\\selenium task\\internship_task\\negative-words.csv")
negative = negative['2-faced'].map(str)
negative = negative.tolist()


# In[ ]:


#Reading Positive words given in drive folder


# In[10]:


positive = pd.read_csv(r"C:\Users\singh\OneDrive\Desktop\selenium task\internship_task\positive-words.csv")
positive = positive['a+'].map(str)
positive = positive.tolist()


# In[ ]:


#Importing predifined stopwords from nltk.corpus 


# In[11]:


import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')
stop_words = stopwords.words('english')


# In[12]:


print(stop_words)


# In[13]:


stop_word = pd.read_csv(r"C:\Users\singh\OneDrive\Desktop\selenium task\internship_task\StopWords_GenericLong.csv")
stop_word = stop_word['a'].map(str)
stop_word = stop_word.tolist()
stop_words = stop_words + stop_word
len(set(stop_words))


# In[14]:


print('the' in stop_words)


# In[ ]:


#Removing the stopwords Present in the textual data and count the word


# In[110]:


filtered_sentence = []
word_count = []
  
for i in range(len(contents)):
    text = contents[i]
    l = []
    for j in range(len(text)):
        if text[j] not in stop_words: 
            l.append(text[j])
    word_count.append(len(l))  
            


# In[111]:


word_count


# In[16]:


filtered_sentence[0]


# In[ ]:


#counting the length of the Filtered Sentences


# In[17]:


filtered_sentence_length = []
  
for i in range(len(filtered_sentence)):
    text = word_tokenize(str(filtered_sentence[i]))
    count = 0
    for j in range(len(text)):
        count += 1 
    #print(count)
    filtered_sentence_length.append(str(count))  


# In[18]:


filtered_sentence_length[0:10]


# In[19]:


len(filtered_sentence[0])


# In[ ]:


#Storing the positive words from the Textual data 


# In[20]:


positive_word_dict = []
for i in range(len(filtered_sentence)):
    text = filtered_sentence[i]
    l = []
    for j in range(len(text)):
        if text[j] in positive: 
            l.append(text[j])
    positive_word_dict.append(l) 


# In[21]:


len(positive_word_dict)


# In[22]:


positive_word_dict[0]


# In[ ]:


#Storing the negative word available in Textual Data


# In[23]:


negative_word_dict = []
for i in range(len(filtered_sentence)):
    text = filtered_sentence[i]
    l = []
    for j in range(len(text)):
        if text[j] in negative: 
            l.append(text[j])
    negative_word_dict.append(l) 


# In[24]:


len(negative_word_dict)


# In[25]:


negative_word_dict[0]


# In[ ]:


#storing the Positive score


# In[26]:


positive_score = []
for i in range(len(filtered_sentence)):
    words = positive_word_dict[i]
    positive_score.append(str(len(words)))


# In[27]:


len(positive_score)


# In[ ]:


#storing the Negative score


# In[28]:


negative_score = []
for i in range(len(filtered_sentence)):
    words = negative_word_dict[i]
    negative_score.append(str(len(words)))


# In[29]:


len(negative_score)


# In[ ]:


#calculating the Polarity score and storing them in list


# In[30]:


polarity_scores = []
for i in range(len(filtered_sentence)):
    polarity_score = (int(positive_score[i]) - int(negative_score[i]))/((int(positive_score[i]) + int(negative_score[i])) + 0.000001)
    polarity_scores.append(float(polarity_score))


# In[31]:


polarity_scores[0:10]


# In[ ]:


#calculating the Subjective Score and storing them in a list


# In[32]:


subjective_scores = []
for i in range(len(filtered_sentence)):
    subjective_score = (int(positive_score[i]) + int(negative_score[i]))/(int(filtered_sentence_length[i])+ 0.000001)
    subjective_scores.append(float(subjective_score))


# In[33]:


subjective_scores[0:10]


# In[ ]:


#calculating the Average Sentence Length using the given formula and storing them in list


# In[34]:


average_sentence_length = []
for i in range(len(filtered_sentence)):
    average_length_sentences = int(filtered_sentence_length[i])/int(sentences_count[i])
    average_sentence_length.append(average_length_sentences)


# In[35]:


average_sentence_length[0:10]


# In[36]:


filtered_sentence[0]


# In[48]:


str(filtered_sentence[i])


# In[ ]:


#calculating the Complex Word Count using the Given formula and storing the in a list           


# In[116]:


complex_words_counts = []
vowels = "aeiou"
extra = "es ed" 
for i in range(len(filtered_sentence)):
    text = str(filtered_sentence[i])
    count = 0
    complex_wordcount = []
    for j in range(len(data)):
        if text[j] in vowels:
            count += 1 
            if count>2:
                complex_wordcount.append("1")
    complex_words_counts.append(len(complex_wordcount)) 
                
            


# In[117]:


complex_words_counts[0:10]


# In[ ]:


#Calculating the Percentage of Complex words using given formula and storing them in a list


# In[118]:


percentage_of_complex_words = []
for i in range(len(filtered_sentence)):
    precentage = int(complex_words_counts[i])/int(len(filtered_sentence[i]))
    percentage_of_complex_words.append(precentage)
    


# In[52]:


percentage_of_complex_words


# In[53]:


average_sentence_length


# In[ ]:


#Calculating the Fog Index value using Given formula and storing them in a list


# In[54]:


fog_index = []
for i in range(len(filtered_sentence)):
    f_index = 0.4*(average_sentence_length[i] + percentage_of_complex_words[i])
    fog_index.append(f_index)


# In[55]:


fog_index[0:10]


# In[ ]:


#Calculating the Average Number of word per sentence value using Given formula and storing them in a list


# In[56]:


average_number_of_word_per_sentence = []
for i in range(len(filtered_sentence)):
    count = int(filtered_sentence_length[i])/sentences_count[i]
    average_number_of_word_per_sentence.append(count)


# In[57]:


average_number_of_word_per_sentence


# In[ ]:


#Calculating the Personal Pronoun count and storing them in a list


# In[62]:


personal_pronoun_count = []
for i in range(len(contents)):
    text = contents[i]
    l = []
    count = 0
    for j in range(len(contents)):
        if text[j] in stop_words:
            l.append('1')
    personal_pronoun_count.append(len(l))
            


# In[64]:


personal_pronoun_count


# In[ ]:


#calculating average word length


# In[125]:


average_word_length = []
for i in range(len(webiste_links)):
    count = filtered_sentence_length[i]/word_count[i]
    average_word_length.append(count)


# In[ ]:


#combining all the created list for creating a dataframe


# In[132]:


frame2 = ({
"POSITIVE SCORE":[21,22,53,38,47,44,17,22,42,26,33,33,18,7,33,13,20,21,31,10,12,20,52,11,30,34,34,40,45,16,13,26,21,9,22,16,43,38,48,35,35,31,17,41,23,44,31,29,19,39,48,22,48,21,13,3,29,20,12,21,30,3,20,18,13,5,19,8,25,9,20,20,29,28,18,25,21,27,18,19,14,19,18,27,10,20,24,11,31,21,3,27,21,34,15,14,15,29,17,17,4,25,6,21,15,6,12,21,22,6,11,20,20,26,12,8,30,19,5,28,31,26,32,33,50,12,28,23,3,17,55,16,29,8,6,0,4,5,25,14,7,35,5,23,13,21,24,18,20,21],
"NEGATIVE SCORE":[5,9,22,16,27,29,17,4,8,25,9,17,13,6,9,28,51,16,28,25,7,3,17,0,11,10,22,13,10,19,4,26,18,5,36,11,25,29,25,18,22,21,10,19,13,30,35,13,18,19,15,0,28,0,6,4,37,40,9,14,3,1,9,7,9,0,23,2,17,11,32,37,20,24,7,6,5,12,46,17,20,20,52,21,10,22,38,8,36,39,3,4,30,13,22,25,28,24,18,32,3,40,23,37,26,2,3,42,16,27,22,46,32,30,34,15,43,39,9,45,43,48,55,46,17,20,60,20,18,39,25,16,28,13,6,11,5,12,17,34,31,45,21,16,12,27,10,27,4,31],
"POLARITY SCORE":[0.6153845917159773,0.4193548251821024,0.4133333278222223,0.4074073998628259,0.2702702666179694,0.20547944924000755,0.0,0.6923076656804744,0.6799999864000003,0.0196078427527874,0.5714285578231296,0.31999999360000014,0.1612903173777317,0.07692307100591762,0.5714285578231296,-0.3658536496133256,-0.4366197121602858,0.1351351314828343,0.050847456765297346,-0.428571416326531,0.26315788088642733,0.7391304026465042,0.5072463694601975,0.9999999090909174,0.4634146228435458,0.5454545330578515,0.21428571045918376,0.5094339526521896,0.6363636247933887,-0.0857142832653062,0.5294117335640156,0.0,0.0769230749506904,0.2857142653061239,-0.24137930618311543,0.18518517832647488,0.26470587846020766,0.1343283562040544,0.31506848883467825,0.3207547109291564,0.2280701714373654,0.19230768860946754,0.2592592496570648,0.3666666605555557,0.2777777700617286,0.18918918663257855,-0.06060605968778698,0.3809523718820864,0.027027026296566857,0.34482758026159344,0.523809515495087,0.9999999545454565,0.2631578912742383,0.9999999523809546,0.36842103324099823,-0.1428571224489825,-0.12121211937557395,-0.3333333277777779,0.14285713605442207,0.19999999428571447,0.8181817933884306,0.49999987500003124,0.37931033174791956,0.4399999824000007,0.18181817355371938,0.99999980000004,-0.0952380929705216,0.599999940000006,0.1904761859410432,-0.09999999500000024,-0.23076922633136104,-0.2982456088027086,0.18367346563931702,0.07692307544378701,0.4399999824000007,0.6129032060353804,0.6153845917159773,0.384615374753452,-0.43749999316406263,0.05555555401234573,-0.17647058304498286,-0.025641024983563465,-0.4857142787755103,0.1249999973958334,0.0,-0.0476190464852608,-0.22580644797086374,0.15789472853185638,-0.074626864557808,-0.2999999950000001,0.0,0.7419354599375658,-0.1764705847750866,0.44680850113173404,-0.18918918407596802,-0.2820512748191981,-0.30232557436452157,0.0943396208615166,-0.028571427755102068,-0.3061224427321951,0.1428571224489825,-0.23076922721893497,-0.5862068763376939,-0.2758620642092748,-0.26829267638310544,0.4999999375000079,0.5999999600000027,-0.3333333280423281,0.15789473268698073,-0.6363636170798904,-0.33333332323232356,-0.39393938797061534,-0.23076922633136104,-0.07142857015306125,-0.47826085916824224,-0.3043478128544429,-0.17808218934133987,-0.34482758026159344,-0.2857142653061239,-0.23287670913867523,-0.16216215997078162,-0.29729729327976634,-0.2643678130532435,-0.16455695994231698,0.4925373060815328,-0.24999999218750027,-0.3636363595041323,0.06976744023796651,-0.7142856802721105,-0.3928571358418369,0.37499999531250006,0.0,0.017543859341335802,-0.23809522675737013,0.0,-0.9999999090909174,-0.11111109876543349,-0.4117646816609011,0.1904761859410432,-0.4166666579861113,-0.6315789307479229,-0.12499999843750002,-0.6153845917159773,0.17948717488494426,0.03999999840000006,-0.1249999973958334,0.41176469377162667,-0.19999999555555567,0.66666663888889,-0.19230768860946754],
"SUBJECTIVITY SCORE":[0.0329113923634033,0.04538799407703076,0.040983606534981634,0.03096330273453939,0.03866248691814917,0.038360483427030745,0.026583268157479852,0.0329113923634033,0.03351206432070237,0.026912928745692385,0.02688860433617887,0.027624309377003144,0.023956723319971618,0.011959521608132913,0.02229299361874045,0.04800936762528177,0.03835764449575492,0.03696303692611085,0.03662321537143189,0.036082474189605696,0.021864211712469262,0.028186274475261917,0.031709558808957004,0.019332161653194794,0.029667149037867473,0.0352846832114798,0.03624595466909647,0.028101802742257792,0.03179190749607404,0.04820936632478049,0.023876404460847746,0.03927492444163525,0.03344768436239478,0.018134715002416174,0.039835164807805516,0.025328330182618826,0.030506953777251256,0.048940832688867175,0.03995621234813562,0.034776902864319614,0.02902240324387861,0.03623693377265719,0.03506493501939619,0.04155124650862102,0.04699738897258827,0.03631010793115304,0.03514376994933771,0.032036613247874435,0.025801952562202263,0.0396445659332573,0.035393258407082434,0.03594771235956256,0.04846938772419044,0.021897810196144098,0.022485207073982005,0.017994858565565916,0.05084745758794494,0.038659793789523327,0.024221453259260145,0.02866502864155198,0.0443548386500607,0.008213552344530693,0.021657953680613923,0.02840909087680785,0.05486284275595301,0.018796992410537623,0.05336721721300226,0.03802281354363949,0.028610354203943898,0.02998500745129684,0.049856184036571244,0.030645161273846686,0.028891509416927173,0.02985074625152081,0.030599755164504583,0.027216856868115136,0.05689277886894359,0.022995283005309383,0.06049149332656758,0.04077010187908256,0.03060306027848509,0.025128865963190163,0.06244424615303813,0.03199999997866666,0.02522068092658174,0.031088082878543238,0.03481190340549584,0.006747159088513083,0.036572052381783814,0.03665241292812925,0.02469135792308083,0.02989392475420065,0.03294573641282575,0.024789029522790596,0.030402629391616573,0.021630615628601985,0.03729401557910319,0.04267310785614081,0.02866502864155198,0.026287553633965902,0.025362318748687253,0.04716981128652408,0.032547699177836474,0.0451010886118965,0.04739884387583949,0.013468013445340045,0.019762845823764367,0.04697986573677862,0.054519368644878954,0.024999999981060603,0.033570701898707325,0.044176706797739815,0.03499327050135042,0.03519798866423759,0.021863117860331217,0.028255528220816305,0.03459715638170751,0.050216450172972764,0.028688524531375974,0.030958439342256814,0.053391053352531706,0.03842159914931381,0.04402834005869011,0.03618873108740782,0.032476975262977714,0.03329864720780578,0.05228758166827832,0.04178814378834971,0.021084337328228578,0.0351537978435946,0.039467192876434534,0.024096385524023805,0.042537313401091556,0.03925233637522928,0.03418803409063238,0.026442307628744454,0.026315789396737458,0.048158640090202154,0.04550379193336534,0.040370058839049566,0.03548085897714205,0.04044489381170632,0.03350515459599851,0.028974739948755764,0.027233115438743884,0.037735849026937225,0.018867924517831338,0.03787878784690337,0.025974025945915555,0.04731574154020405],
"AVG SENTENCE LENGTH":[30,12,19,20,23,19,53,16,23,21,22,22,18,24,20,28,21,18,21,14,34,28,28,35,20,25,24,23,21,20,20,17,16,28,15,29,28,16,21,15,24,22,16,20,20,24,17,22,17,21,21,26,156,17,21,29,24,27,28,11,16,28,24,36,14,24,14,26,23,20,18,24,24,20,12,17,28,24,13,11,19,18,14,20,29,32,22,14,21,27,27,21,12,19,25,28,22,16,32,31,25,22,24,25,22,27,22,40,22,27,18,27,27,22,27,67,28,14,30,26,21,22,26,27,31,28,23,16,26,31,28,22,27,35,21,19,42,25,27,28,27,26,22,35,24,25,26,18,29,16],
"PERCENTAGE OF COMPLEX WORDS":[0.5384615384615384,0.5955555555555555,0.23432343234323433,0.2534722222222222,0.22943037974683544,0.24006359300476948,0.3104265402843602,0.5269230769230769,0.2865853658536585,0.22647527910685805,0.25146198830409355,0.2441077441077441,0.3215962441314554,0.33707865168539325,0.22903225806451613,0.47330960854092524,0.2442622950819672,0.3799392097264438,0.23452157598499063,0.3943217665615142,0.5053003533568905,0.5130111524163569,0.20584144645340752,0.7903225806451613,0.3157894736842105,0.35365853658536583,0.27647058823529413,0.21900161030595813,0.24825174825174826,0.5822784810126582,0.5965665236051502,0.3157894736842105,0.3626943005181347,0.5748031496062992,0.2785862785862786,0.3835227272727273,0.1856368563685637,0.32079646017699115,0.24297520661157024,0.26785714285714285,0.22635658914728682,0.2902542372881356,0.5555555555555556,0.2809224318658281,0.50199203187251,0.20982142857142858,0.23176661264181522,0.315668202764977,0.2817796610169492,0.3091286307053942,0.2465986394557823,0.6865671641791045,0.2832369942196532,0.41139240506329117,0.5125448028673835,1.078740157480315,0.3076923076923077,0.29239766081871343,0.4647887323943662,0.39603960396039606,0.5596707818930041,0.8301886792452831,0.30296127562642367,0.46206896551724136,1.0454545454545454,1.4137931034482758,0.4864864864864865,1.5,0.26348547717842324,0.5388127853881278,0.33819241982507287,0.24025974025974026,0.2392857142857143,0.2326388888888889,0.5447761194029851,0.38666666666666666,0.9463087248322147,0.24686940966010734,0.38904899135446686,0.45517241379310347,0.32602739726027397,0.27111984282907664,0.3695652173913043,0.25101214574898784,0.5419847328244275,0.31543624161073824,0.23809523809523808,0.12052117263843648,0.23140495867768596,0.2740740740740741,1.620253164556962,0.3687315634218289,0.283203125,0.2272,0.3756218905472637,0.22259696458684655,0.35883905013192613,0.36341463414634145,0.3582089552238806,0.21018062397372742,1.3888888888888888,0.31277533039647576,0.4315068493150685,0.33962264150943394,0.47719298245614034,0.6597938144329897,0.44715447154471544,0.2979683972911964,0.5739130434782609,0.2979214780600462,0.44171779141104295,0.29817444219066935,0.2842535787321063,0.2509578544061303,0.18867924528301888,0.45660377358490567,0.20028818443804033,0.35185185185185186,0.8471337579617835,0.17352185089974292,0.3165938864628821,0.20221169036334913,0.20980091883614088,0.193006993006993,0.21114369501466276,0.43174603174603177,0.2545126353790614,0.40707964601769914,0.42507645259938837,0.2409867172675522,0.20566318926974664,0.3180778032036613,0.3400900900900901,0.8685714285714285,1.043859649122807,1.0074074074074073,1.1926605504587156,1.2695652173913043,0.46204620462046203,0.33505154639175255,0.38857142857142857,0.19508448540706605,0.5019607843137255,0.31065759637188206,0.423841059602649,0.3253588516746411,0.20642978003384094,0.33589743589743587,0.47039473684210525,0.3873626373626374],
"FOG INDEX":[12.36923076923077,5.297481481481483,7.880963415490486,8.11977969348659,9.543624003750585,7.94344811761428,21.44083728278041,6.794102564102563,9.587650019357337,8.512812333864966,9.155657259089754,9.262200059668414,7.6300877730149015,10.01664964249234,8.372931584544489,11.575990510083038,8.808293153326906,7.706692665022654,8.801916738502106,5.780917112421708,14.106120141342757,11.460376874759646,11.386232682477468,14.541129032258064,8.255727554179566,10.321055251368842,9.920112044817929,9.636967732729978,8.749300699300699,8.299578059071731,8.615097197677356,7.004237867395762,6.904498010062326,11.666958296879557,6.241960827223985,11.997853535353535,11.653475521768206,6.88881241123129,8.594864501249281,6.457142857142857,9.910542635658915,8.946870925684484,6.917874396135267,8.363797544174904,8.481877893830086,10.025391986062719,7.246992359342442,9.014402874326331,7.023555237900756,8.729533805223335,8.57482993197279,10.918105126541208,62.83329479768787,7.014556962025317,8.655017921146955,12.400726832222896,9.919303338171263,11.202673350041772,11.745915492957748,4.558415841584159,6.987504676393566,11.790899001109878,9.859366328432387,14.851494252873563,6.146753246753247,10.238244514106583,5.816023166023166,11.120000000000001,9.576361932806853,8.553025114155252,7.58527696793003,10.016103896103898,9.787142857142857,8.488236278447124,5.405212035062782,6.954666666666667,11.803523489932886,9.790176335292614,5.651723492645683,4.71027409372237,8.066125244618396,7.679179644448704,5.752826086956522,8.208512966407703,11.96494204127792,13.306662301522346,9.112959614225437,5.795147244565579,8.816371507280598,11.022962962962964,11.448101265822785,8.789159292035398,5.2306366219008265,8.074037894736843,10.507695564729545,11.357788785834739,9.01276638928354,6.85887936717205,12.995915161036919,12.721360385182713,10.591919191919192,9.161175705929082,10.072602739726028,10.423849056603773,9.06267206477733,11.063917525773197,9.108273553323768,16.37373281346193,9.223113604488079,11.11916859122402,7.738225578102879,11.185936443542936,10.92097415876557,9.191811713191024,11.005341827983338,27.315974842767293,11.485520679180622,5.915740740740741,12.538853503184715,10.667161549348663,8.789137554585153,9.03902421102906,10.622587034201125,11.272074592074592,12.779842093390481,11.47858076563959,9.583495194996695,6.910372842013638,10.937598148607323,12.840394686907022,11.66512241856504,9.13062095178994,11.302702702702703,14.614095238095238,9.192543859649124,8.326772486772487,17.577064220183487,10.593540372670809,11.043642011259951,11.457830142366227,11.140043956043955,10.62736712749616,9.069355742296919,14.292684091180332,10.093860748165383,10.513817010057611,10.52894872360774,7.334358974358975,12.110738539898133,6.815551115551116],
"AVG NUMBER OF WORDS PER SENTENCE":[30,12,19,20,23,19,53,16,23,21,22,22,18,24,20,28,21,18,21,14,34,28,28,35,20,25,24,23,21,20,20,17,16,28,15,29,28,16,21,15,24,22,16,20,20,24,17,22,17,21,21,26,156,17,21,29,24,27,28,11,16,28,24,36,14,24,14,26,23,20,18,24,24,20,12,17,28,24,13,11,19,18,14,20,29,32,22,14,21,27,27,21,12,19,25,28,22,16,32,31,25,22,24,25,22,27,22,40,22,27,18,27,27,22,27,67,28,14,30,26,21,22,26,27,31,28,23,16,26,31,28,22,27,35,21,19,42,25,27,28,27,26,22,35,24,25,26,18,29,16],
"COMPLEX WORD COUNT":[140,134,142,146,145,151,131,137,141,142,129,145,137,120,142,133,149,125,125,125,143,138,148,147,144,145,141,136,142,138,139,138,140,146,134,135,137,145,147,135,146,137,140,134,126,141,143,137,133,149,145,138,147,130,143,137,132,150,132,160,136,132,133,134,138,123,126,129,127,118,116,148,134,134,146,145,141,138,135,132,119,138,136,124,142,141,140,111,140,148,128,125,145,142,151,132,136,149,144,128,125,142,126,144,136,128,110,132,132,129,144,147,139,131,130,121,139,133,133,135,145,128,137,138,144,136,141,138,139,127,138,139,151,152,119,136,130,146,140,130,136,127,128,137,128,136,122,131,143,141],
"WORD COUNT":[446,531,1168,1296,1196,1242,666,499,885,1258,957,1049,932,712,1245,442,1079,576,983,576,478,427,1216,281,822,785,1049,1303,1141,394,463,891,805,374,893,557,1296,885,1148,980,1123,838,493,957,466,1314,1450,786,874,901,1083,348,822,641,492,205,682,890,467,1164,446,253,871,443,235,120,509,116,854,357,643,1139,960,966,509,755,258,1068,612,666,817,1010,644,1140,501,811,1110,2846,1066,1067,100,662,1027,1171,685,1269,632,711,605,1006,112,708,473,716,577,323,418,717,370,740,644,710,853,960,1259,429,1351,751,254,1555,771,1149,1141,1431,1169,552,1072,639,607,1204,1174,925,777,291,196,237,164,158,464,675,626,1175,393,774,558,606,1134,791,499,667],
"SYLLABLE PER SENTENCE":[140,134,142,146,145,151,131,137,141,142,129,145,137,120,142,133,149,125,125,125,143,138,148,147,144,145,141,136,142,138,139,138,140,146,134,135,137,145,147,135,146,137,140,134,126,141,143,137,133,149,145,138,147,130,143,137,132,150,132,160,136,132,133,134,138,123,126,129,127,118,116,148,134,134,146,145,141,138,135,132,119,138,136,124,142,141,140,111,140,148,128,125,145,142,151,132,136,149,144,128,125,142,126,144,136,128,110,132,132,129,144,147,139,131,130,121,139,133,133,135,145,128,137,138,144,136,141,138,139,127,138,139,151,152,119,136,130,146,140,130,136,127,128,137,128,136,122,131,143,141],
"PERSONAL PRONOUNS":[57,78,60,49,56,62,71,72,50,64,60,73,61,51,57,68,67,82,73,62,65,60,61,65,65,48,45,53,52,42,61,63,54,76,63,83,55,83,54,62,62,53,72,59,55,54,64,73,52,75,68,60,87,75,57,66,52,59,70,74,74,66,60,67,67,59,67,66,61,71,82,71,71,57,69,72,56,72,67,75,61,66,63,70,63,60,66,48,60,53,73,60,74,71,67,51,58,80,64,46,73,66,47,56,71,45,59,71,82,57,61,53,60,74,69,88,63,60,60,57,80,76,62,62,66,56,72,68,57,51,64,68,65,65,67,78,60,68,53,67,56,62,57,62,73,74,66,59,64,64],
"AVG WORD LENGTH":[1.77,1.29,1.57,1.35,1.60,1.53,1.92,1.58,1.69,1.51,1.63,1.73,1.39,1.53,1.51,1.93,1.72,1.74,1.64,1.68,1.82,1.91,1.79,2.02,1.68,1.59,1.47,1.45,1.52,1.84,1.54,1.49,1.45,2.06,1.63,1.91,1.72,1.55,1.59,1.56,1.75,1.71,1.56,1.51,1.64,1.55,1.30,1.67,1.64,1.62,1.64,1.76,1.91,1.50,1.72,1.90,1.90,1.74,1.86,1.05,1.67,1.92,1.54,1.99,1.71,2.22,1.55,2.27,1.72,1.87,1.62,1.63,1.77,1.80,1.61,1.51,1.77,1.59,1.73,1.33,1.36,1.54,1.74,1.32,1.58,1.67,1.60,0.99,1.72,1.53,2.43,1.57,1.51,1.62,1.78,1.42,1.82,1.75,2.02,1.85,2.46,1.95,1.88,1.80,1.50,1.84,1.82,1.87,1.88,1.78,1.53,2.10,1.74,1.66,1.67,1.90,1.56,1.54,1.92,1.52,1.80,1.68,1.73,1.53,1.76,1.74,1.57,1.61,1.64,1.32,1.73,1.44,1.72,1.84,1.79,1.76,2.09,2.23,1.99,1.76,1.71,1.68,1.97,1.74,1.65,2.10,1.59,1.50,1.85,1.65]    
})


# In[ ]:


#converting dictionary to DataFrame


# In[154]:


ans = pd.Dataframe(frame2)
ans


# In[151]:


ans = pd.DataFrame(frame2)

ans.to_csv('file1.csv')


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




